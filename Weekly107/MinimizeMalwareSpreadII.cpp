class Solution {
public:

    int try_it(const vector<vector<int>>& G, const vector<int>& initial, int r) {
        int cnt = 0;
        int l = G.size();
        queue<int> q;
        set<int> visited;

        for (auto i : initial) {
            visited.insert(i);
            if (i == r) continue;
            q.push(i);
            cnt ++;
        }

        while(!q.empty()) {
            int p = q.front(); q.pop();
            for (int i=0;i<l;++i) {
                if (G[p][i] == 1 && visited.count(i) == 0) {
                    q.push(i);
                    visited.insert(i);
                    cnt++;
                }
            }
        }

        return cnt;
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int best = graph.size() + 1;
        int idx = 0;
        sort(initial.begin(), initial.end());
        for (auto i : initial) {
            int r = try_it(graph, initial, i);
            if (r < best) {
                best = r;
                idx = i;
            }
        }
        return idx;
    }
};
